Parameters:
  ProjectName:
    Type: String
    Default: "serverless-slack-clone"
    Description: The name of the project
Resources:
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref ProjectName
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: sk-index
          KeySchema:
            - AttributeName: sk
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: conn
          KeySchema:
            - AttributeName: conn
              KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: conn
          AttributeType: S
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Ref ProjectName
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.event"

  ApiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: production
      AutoDeploy: true
      DefaultRouteSettings:
        ThrottlingRateLimit: 10
        ThrottlingBurstLimit: 100
      StageVariables:
        DYNAMODB_TABLE_NAME: !Ref DynamoDBTable

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-lambdas
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "LambdaBasicExecution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ProjectName}*:*"
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"
        - PolicyName: "ResourceAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt DynamoDBTable.Arn
                  - !Sub "${DynamoDBTable.Arn}/index/*"
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                  - execute-api:ManageConnections
                Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*"

  ConnectLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-connect
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - arm64
      TracingConfig:
        Mode: Active
      MemorySize: 1800
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: |
          // This is a noop handler for now
          exports.handler = async (event, context) => {
            console.log(event);
            return {statusCode: 200}
          };
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable

  ConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"

  DefaultLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-default
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - arm64
      TracingConfig:
        Mode: Active
      MemorySize: 1800
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: |
          // This is a noop handler for now
          exports.handler = async (event, context) => {
            console.log(event);
            return {statusCode: 200}
          };
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable

  DefaultPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DefaultLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectLambda.Arn}/invocations"
      IntegrationMethod: POST
      PayloadFormatVersion: "1.0"

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: $connect
      Target: !Sub integrations/${ConnectIntegration}

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: $disconnect
      Target: !Sub integrations/${ConnectIntegration}
